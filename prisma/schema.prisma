// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String    @id
  username String @unique
}

model Student {
  id    String    @id
  username  String @unique
  name      String
  surname   String
  email     String?
  phone     String?
  address   String
  img       String?
  gender    UserGender
  createdAt DateTime @default(now())
  //Relations
  classId Int
  class Class @relation(fields: [classId], references: [id])
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results Result[]
}

model Doctor {
  id    String    @id
  username  String @unique
  name      String
  surname   String
  email     String?
  phone     String?
  address   String
  img       String?
  gender    UserGender
  createdAt   DateTime @default(now())
  //Relations
  subjects  Subject[]
  lectures  Lecture[]
  classes   Class[]
}

model Grade {
  id  Int @id @default(autoincrement())
  level Int @unique
  //Relations
  students Student[]
  classes Class[]
}

model Class {
  id  Int @id @default(autoincrement())
  name String @unique
  capacity Int
  //Relations
  lectures Lecture[]
  students Student[]
  supervisorId String?
  supervisor Doctor? @relation(fields: [supervisorId], references: [id])
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  events Event[]
  announcements Announcement[]
}

model Subject {
  id  Int @id @default(autoincrement())
  name String @unique
  //Relations
  doctors Doctor[]
  lectures Lecture[]
}

model Lecture {
  id Int @id @default(autoincrement())
  name String
  day Day
  startTime DateTime
  endTime DateTime
  //Relations
  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])
  exams Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id Int @id @default(autoincrement())
  title String
  startTime DateTime
  endTime DateTime
  //Realtions
  lectureId Int
  lecture Lecture @relation(fields: [lectureId], references: [id])
  results Result[]
}

model Assignment {
  id Int @id @default(autoincrement())
  title String
  dueDate DateTime
  //Relations
  lectureId Int
  lecture Lecture @relation(fields: [lectureId], references: [id])
  results Result[]
}

model Result {
  id Int @id @default(autoincrement())  
  score Int
  //Relations
  examId Int
  exam Exam @relation(fields: [examId], references: [id])
  assignmentId Int
  assignment Assignment @relation(fields: [assignmentId], references: [id])
  studentId String
  student Student @relation(fields: [studentId], references: [id])
}

model Attendance {
  id Int @id @default(autoincrement())
  date DateTime
  //Relations
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  lectureId Int
  lecture Lecture @relation(fields: [lectureId], references: [id])
}

model Event {
  id Int @id @default(autoincrement())
  title String
  description String
  startTime DateTime
  endTime DateTime
  //Relations
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id Int @id @default(autoincrement())
  title String
  description String
  date DateTime
  //Relations
  classId Int?
  class Class ? @relation(fields: [classId], references: [id])
}

enum UserGender {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
